import type { FloatProps } from './float';
export declare function createHighOrderFloatComponent(baseProps: FloatProps): import("./types").__VLS_WithTemplateSlots<import("vue").DefineComponent<{
    as: {
        type: import("vue").PropType<string | import("vue").FunctionalComponent<{}, {}, any, {}>>;
        default: string;
    };
    floatingAs: {
        type: import("vue").PropType<string | import("vue").FunctionalComponent<{}, {}, any, {}>>;
        default: string;
    };
    show: {
        type: BooleanConstructor;
        default: null;
    };
    placement: {
        type: import("vue").PropType<import("@floating-ui/utils").Placement>;
        default: import("@floating-ui/utils").Placement;
    };
    strategy: {
        type: import("vue").PropType<import("@floating-ui/utils").Strategy>;
        default: import("@floating-ui/utils").Strategy;
    };
    offset: import("vue").PropType<import("@floating-ui/core").OffsetOptions>;
    shift: {
        type: import("vue").PropType<number | boolean | Partial<import("@floating-ui/core").ShiftOptions & {
            rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
            elementContext?: import("@floating-ui/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            padding?: import("@floating-ui/utils").Padding | undefined;
            boundary?: import("@floating-ui/dom").Boundary | undefined;
        }>>;
        default: boolean;
    };
    flip: {
        type: import("vue").PropType<number | boolean | Partial<import("@floating-ui/core").FlipOptions & {
            rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
            elementContext?: import("@floating-ui/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            padding?: import("@floating-ui/utils").Padding | undefined;
            boundary?: import("@floating-ui/dom").Boundary | undefined;
        }>>;
        default: boolean;
    };
    arrow: {
        type: (NumberConstructor | BooleanConstructor)[];
        default: boolean;
    };
    autoPlacement: {
        type: import("vue").PropType<boolean | Partial<import("@floating-ui/core").AutoPlacementOptions & {
            rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
            elementContext?: import("@floating-ui/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            padding?: import("@floating-ui/utils").Padding | undefined;
            boundary?: import("@floating-ui/dom").Boundary | undefined;
        }>>;
        default: boolean;
    };
    hide: {
        type: import("vue").PropType<boolean | Partial<import("@floating-ui/core").HideOptions & {
            rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
            elementContext?: import("@floating-ui/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            padding?: import("@floating-ui/utils").Padding | undefined;
            boundary?: import("@floating-ui/dom").Boundary | undefined;
        }> | Partial<import("@floating-ui/core").HideOptions & {
            rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
            elementContext?: import("@floating-ui/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            padding?: import("@floating-ui/utils").Padding | undefined;
            boundary?: import("@floating-ui/dom").Boundary | undefined;
        }>[]>;
        default: boolean;
    };
    referenceHiddenClass: StringConstructor;
    escapedClass: StringConstructor;
    autoUpdate: {
        type: import("vue").PropType<boolean | Partial<import("@floating-ui/dom").AutoUpdateOptions>>;
        default: boolean;
    };
    zIndex: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    vueTransition: {
        type: BooleanConstructor;
        default: boolean;
    };
    transitionName: StringConstructor;
    transitionType: import("vue").PropType<"transition" | "animation">;
    enter: StringConstructor;
    enterFrom: StringConstructor;
    enterTo: StringConstructor;
    leave: StringConstructor;
    leaveFrom: StringConstructor;
    leaveTo: StringConstructor;
    originClass: import("vue").PropType<string | import("./class-resolvers").ClassResolver>;
    tailwindcssOriginClass: {
        type: BooleanConstructor;
        default: boolean;
    };
    portal: {
        type: BooleanConstructor;
        default: boolean;
    };
    transform: {
        type: BooleanConstructor;
        default: boolean;
    };
    adaptiveWidth: {
        type: import("vue").PropType<boolean | {
            attribute?: string | undefined;
        }>;
        default: boolean;
    };
    composable: {
        type: BooleanConstructor;
        default: boolean;
    };
    dialog: {
        type: BooleanConstructor;
        default: boolean;
    };
    middleware: {
        type: import("vue").PropType<{
            name: string;
            options?: any;
            fn: (state: {
                x: number;
                y: number;
                strategy: import("@floating-ui/utils").Strategy;
                initialPlacement: import("@floating-ui/utils").Placement;
                placement: import("@floating-ui/utils").Placement;
                middlewareData: import("@floating-ui/core").MiddlewareData;
                rects: import("@floating-ui/utils").ElementRects;
                platform: import("@floating-ui/core").Platform;
                elements: import("@floating-ui/dom").Elements;
            }) => import("@floating-ui/core").MiddlewareReturn | Promise<import("@floating-ui/core").MiddlewareReturn>;
        }[] | ((refs: {
            referenceEl: import("vue").ComputedRef<import("./types").ReferenceElement | null>;
            floatingEl: import("vue").ComputedRef<HTMLElement | null>;
        }) => {
            name: string;
            options?: any;
            fn: (state: {
                x: number;
                y: number;
                strategy: import("@floating-ui/utils").Strategy;
                initialPlacement: import("@floating-ui/utils").Placement;
                placement: import("@floating-ui/utils").Placement;
                middlewareData: import("@floating-ui/core").MiddlewareData;
                rects: import("@floating-ui/utils").ElementRects;
                platform: import("@floating-ui/core").Platform;
                elements: import("@floating-ui/dom").Elements;
            }) => import("@floating-ui/core").MiddlewareReturn | Promise<import("@floating-ui/core").MiddlewareReturn>;
        }[])>;
        default: () => never[];
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[] | undefined, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("show" | "hide" | "update")[], "show" | "hide" | "update", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    as: {
        type: import("vue").PropType<string | import("vue").FunctionalComponent<{}, {}, any, {}>>;
        default: string;
    };
    floatingAs: {
        type: import("vue").PropType<string | import("vue").FunctionalComponent<{}, {}, any, {}>>;
        default: string;
    };
    show: {
        type: BooleanConstructor;
        default: null;
    };
    placement: {
        type: import("vue").PropType<import("@floating-ui/utils").Placement>;
        default: import("@floating-ui/utils").Placement;
    };
    strategy: {
        type: import("vue").PropType<import("@floating-ui/utils").Strategy>;
        default: import("@floating-ui/utils").Strategy;
    };
    offset: import("vue").PropType<import("@floating-ui/core").OffsetOptions>;
    shift: {
        type: import("vue").PropType<number | boolean | Partial<import("@floating-ui/core").ShiftOptions & {
            rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
            elementContext?: import("@floating-ui/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            padding?: import("@floating-ui/utils").Padding | undefined;
            boundary?: import("@floating-ui/dom").Boundary | undefined;
        }>>;
        default: boolean;
    };
    flip: {
        type: import("vue").PropType<number | boolean | Partial<import("@floating-ui/core").FlipOptions & {
            rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
            elementContext?: import("@floating-ui/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            padding?: import("@floating-ui/utils").Padding | undefined;
            boundary?: import("@floating-ui/dom").Boundary | undefined;
        }>>;
        default: boolean;
    };
    arrow: {
        type: (NumberConstructor | BooleanConstructor)[];
        default: boolean;
    };
    autoPlacement: {
        type: import("vue").PropType<boolean | Partial<import("@floating-ui/core").AutoPlacementOptions & {
            rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
            elementContext?: import("@floating-ui/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            padding?: import("@floating-ui/utils").Padding | undefined;
            boundary?: import("@floating-ui/dom").Boundary | undefined;
        }>>;
        default: boolean;
    };
    hide: {
        type: import("vue").PropType<boolean | Partial<import("@floating-ui/core").HideOptions & {
            rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
            elementContext?: import("@floating-ui/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            padding?: import("@floating-ui/utils").Padding | undefined;
            boundary?: import("@floating-ui/dom").Boundary | undefined;
        }> | Partial<import("@floating-ui/core").HideOptions & {
            rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
            elementContext?: import("@floating-ui/core").ElementContext | undefined;
            altBoundary?: boolean | undefined;
            padding?: import("@floating-ui/utils").Padding | undefined;
            boundary?: import("@floating-ui/dom").Boundary | undefined;
        }>[]>;
        default: boolean;
    };
    referenceHiddenClass: StringConstructor;
    escapedClass: StringConstructor;
    autoUpdate: {
        type: import("vue").PropType<boolean | Partial<import("@floating-ui/dom").AutoUpdateOptions>>;
        default: boolean;
    };
    zIndex: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    vueTransition: {
        type: BooleanConstructor;
        default: boolean;
    };
    transitionName: StringConstructor;
    transitionType: import("vue").PropType<"transition" | "animation">;
    enter: StringConstructor;
    enterFrom: StringConstructor;
    enterTo: StringConstructor;
    leave: StringConstructor;
    leaveFrom: StringConstructor;
    leaveTo: StringConstructor;
    originClass: import("vue").PropType<string | import("./class-resolvers").ClassResolver>;
    tailwindcssOriginClass: {
        type: BooleanConstructor;
        default: boolean;
    };
    portal: {
        type: BooleanConstructor;
        default: boolean;
    };
    transform: {
        type: BooleanConstructor;
        default: boolean;
    };
    adaptiveWidth: {
        type: import("vue").PropType<boolean | {
            attribute?: string | undefined;
        }>;
        default: boolean;
    };
    composable: {
        type: BooleanConstructor;
        default: boolean;
    };
    dialog: {
        type: BooleanConstructor;
        default: boolean;
    };
    middleware: {
        type: import("vue").PropType<{
            name: string;
            options?: any;
            fn: (state: {
                x: number;
                y: number;
                strategy: import("@floating-ui/utils").Strategy;
                initialPlacement: import("@floating-ui/utils").Placement;
                placement: import("@floating-ui/utils").Placement;
                middlewareData: import("@floating-ui/core").MiddlewareData;
                rects: import("@floating-ui/utils").ElementRects;
                platform: import("@floating-ui/core").Platform;
                elements: import("@floating-ui/dom").Elements;
            }) => import("@floating-ui/core").MiddlewareReturn | Promise<import("@floating-ui/core").MiddlewareReturn>;
        }[] | ((refs: {
            referenceEl: import("vue").ComputedRef<import("./types").ReferenceElement | null>;
            floatingEl: import("vue").ComputedRef<HTMLElement | null>;
        }) => {
            name: string;
            options?: any;
            fn: (state: {
                x: number;
                y: number;
                strategy: import("@floating-ui/utils").Strategy;
                initialPlacement: import("@floating-ui/utils").Placement;
                placement: import("@floating-ui/utils").Placement;
                middlewareData: import("@floating-ui/core").MiddlewareData;
                rects: import("@floating-ui/utils").ElementRects;
                platform: import("@floating-ui/core").Platform;
                elements: import("@floating-ui/dom").Elements;
            }) => import("@floating-ui/core").MiddlewareReturn | Promise<import("@floating-ui/core").MiddlewareReturn>;
        }[])>;
        default: () => never[];
    };
}>> & {
    onShow?: ((...args: any[]) => any) | undefined;
    onHide?: ((...args: any[]) => any) | undefined;
    onUpdate?: ((...args: any[]) => any) | undefined;
}, {
    shift: number | boolean | Partial<import("@floating-ui/core").ShiftOptions & {
        rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
        elementContext?: import("@floating-ui/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        padding?: import("@floating-ui/utils").Padding | undefined;
        boundary?: import("@floating-ui/dom").Boundary | undefined;
    }>;
    strategy: import("@floating-ui/utils").Strategy;
    placement: import("@floating-ui/utils").Placement;
    dialog: boolean;
    as: string | import("vue").FunctionalComponent<{}, {}, any, {}>;
    vueTransition: boolean;
    tailwindcssOriginClass: boolean;
    show: boolean;
    floatingAs: string | import("vue").FunctionalComponent<{}, {}, any, {}>;
    flip: number | boolean | Partial<import("@floating-ui/core").FlipOptions & {
        rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
        elementContext?: import("@floating-ui/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        padding?: import("@floating-ui/utils").Padding | undefined;
        boundary?: import("@floating-ui/dom").Boundary | undefined;
    }>;
    arrow: number | boolean;
    autoPlacement: boolean | Partial<import("@floating-ui/core").AutoPlacementOptions & {
        rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
        elementContext?: import("@floating-ui/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        padding?: import("@floating-ui/utils").Padding | undefined;
        boundary?: import("@floating-ui/dom").Boundary | undefined;
    }>;
    hide: boolean | Partial<import("@floating-ui/core").HideOptions & {
        rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
        elementContext?: import("@floating-ui/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        padding?: import("@floating-ui/utils").Padding | undefined;
        boundary?: import("@floating-ui/dom").Boundary | undefined;
    }> | Partial<import("@floating-ui/core").HideOptions & {
        rootBoundary?: import("@floating-ui/core").RootBoundary | undefined;
        elementContext?: import("@floating-ui/core").ElementContext | undefined;
        altBoundary?: boolean | undefined;
        padding?: import("@floating-ui/utils").Padding | undefined;
        boundary?: import("@floating-ui/dom").Boundary | undefined;
    }>[];
    autoUpdate: boolean | Partial<import("@floating-ui/dom").AutoUpdateOptions>;
    zIndex: string | number;
    portal: boolean;
    transform: boolean;
    adaptiveWidth: boolean | {
        attribute?: string | undefined;
    };
    composable: boolean;
    middleware: {
        name: string;
        options?: any;
        fn: (state: {
            x: number;
            y: number;
            strategy: import("@floating-ui/utils").Strategy;
            initialPlacement: import("@floating-ui/utils").Placement;
            placement: import("@floating-ui/utils").Placement;
            middlewareData: import("@floating-ui/core").MiddlewareData;
            rects: import("@floating-ui/utils").ElementRects;
            platform: import("@floating-ui/core").Platform;
            elements: import("@floating-ui/dom").Elements;
        }) => import("@floating-ui/core").MiddlewareReturn | Promise<import("@floating-ui/core").MiddlewareReturn>;
    }[] | ((refs: {
        referenceEl: import("vue").ComputedRef<import("./types").ReferenceElement | null>;
        floatingEl: import("vue").ComputedRef<HTMLElement | null>;
    }) => {
        name: string;
        options?: any;
        fn: (state: {
            x: number;
            y: number;
            strategy: import("@floating-ui/utils").Strategy;
            initialPlacement: import("@floating-ui/utils").Placement;
            placement: import("@floating-ui/utils").Placement;
            middlewareData: import("@floating-ui/core").MiddlewareData;
            rects: import("@floating-ui/utils").ElementRects;
            platform: import("@floating-ui/core").Platform;
            elements: import("@floating-ui/dom").Elements;
        }) => import("@floating-ui/core").MiddlewareReturn | Promise<import("@floating-ui/core").MiddlewareReturn>;
    }[]);
}, {}>, Readonly<{
    default: (props: import("./float").FloatSlotProps) => any;
}> & {
    default: (props: import("./float").FloatSlotProps) => any;
}>;
