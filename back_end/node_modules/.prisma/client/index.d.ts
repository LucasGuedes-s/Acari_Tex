
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model estoque
 * 
 */
export type estoque = $Result.DefaultSelection<Prisma.$estoquePayload>
/**
 * Model Estoque_Agulhas
 * 
 */
export type Estoque_Agulhas = $Result.DefaultSelection<Prisma.$Estoque_AgulhasPayload>
/**
 * Model Funcionarios
 * 
 */
export type Funcionarios = $Result.DefaultSelection<Prisma.$FuncionariosPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Estoques
 * const estoques = await prisma.estoque.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Estoques
   * const estoques = await prisma.estoque.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.estoque`: Exposes CRUD operations for the **estoque** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Estoques
    * const estoques = await prisma.estoque.findMany()
    * ```
    */
  get estoque(): Prisma.estoqueDelegate<ExtArgs>;

  /**
   * `prisma.estoque_Agulhas`: Exposes CRUD operations for the **Estoque_Agulhas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Estoque_Agulhas
    * const estoque_Agulhas = await prisma.estoque_Agulhas.findMany()
    * ```
    */
  get estoque_Agulhas(): Prisma.Estoque_AgulhasDelegate<ExtArgs>;

  /**
   * `prisma.funcionarios`: Exposes CRUD operations for the **Funcionarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Funcionarios
    * const funcionarios = await prisma.funcionarios.findMany()
    * ```
    */
  get funcionarios(): Prisma.FuncionariosDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.1.0
   * Query Engine version: a9b7003df90aa623086e4d6f4e43c72468e6339b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    estoque: 'estoque',
    Estoque_Agulhas: 'Estoque_Agulhas',
    Funcionarios: 'Funcionarios'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'estoque' | 'estoque_Agulhas' | 'funcionarios'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      estoque: {
        payload: Prisma.$estoquePayload<ExtArgs>
        fields: Prisma.estoqueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.estoqueFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$estoquePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.estoqueFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$estoquePayload>
          }
          findFirst: {
            args: Prisma.estoqueFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$estoquePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.estoqueFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$estoquePayload>
          }
          findMany: {
            args: Prisma.estoqueFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$estoquePayload>[]
          }
          create: {
            args: Prisma.estoqueCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$estoquePayload>
          }
          createMany: {
            args: Prisma.estoqueCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.estoqueDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$estoquePayload>
          }
          update: {
            args: Prisma.estoqueUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$estoquePayload>
          }
          deleteMany: {
            args: Prisma.estoqueDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.estoqueUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.estoqueUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$estoquePayload>
          }
          aggregate: {
            args: Prisma.EstoqueAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEstoque>
          }
          groupBy: {
            args: Prisma.estoqueGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EstoqueGroupByOutputType>[]
          }
          count: {
            args: Prisma.estoqueCountArgs<ExtArgs>,
            result: $Utils.Optional<EstoqueCountAggregateOutputType> | number
          }
        }
      }
      Estoque_Agulhas: {
        payload: Prisma.$Estoque_AgulhasPayload<ExtArgs>
        fields: Prisma.Estoque_AgulhasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Estoque_AgulhasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Estoque_AgulhasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Estoque_AgulhasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Estoque_AgulhasPayload>
          }
          findFirst: {
            args: Prisma.Estoque_AgulhasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Estoque_AgulhasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Estoque_AgulhasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Estoque_AgulhasPayload>
          }
          findMany: {
            args: Prisma.Estoque_AgulhasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Estoque_AgulhasPayload>[]
          }
          create: {
            args: Prisma.Estoque_AgulhasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Estoque_AgulhasPayload>
          }
          createMany: {
            args: Prisma.Estoque_AgulhasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Estoque_AgulhasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Estoque_AgulhasPayload>
          }
          update: {
            args: Prisma.Estoque_AgulhasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Estoque_AgulhasPayload>
          }
          deleteMany: {
            args: Prisma.Estoque_AgulhasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Estoque_AgulhasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Estoque_AgulhasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Estoque_AgulhasPayload>
          }
          aggregate: {
            args: Prisma.Estoque_AgulhasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEstoque_Agulhas>
          }
          groupBy: {
            args: Prisma.Estoque_AgulhasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Estoque_AgulhasGroupByOutputType>[]
          }
          count: {
            args: Prisma.Estoque_AgulhasCountArgs<ExtArgs>,
            result: $Utils.Optional<Estoque_AgulhasCountAggregateOutputType> | number
          }
        }
      }
      Funcionarios: {
        payload: Prisma.$FuncionariosPayload<ExtArgs>
        fields: Prisma.FuncionariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FuncionariosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FuncionariosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionariosPayload>
          }
          findFirst: {
            args: Prisma.FuncionariosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FuncionariosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionariosPayload>
          }
          findMany: {
            args: Prisma.FuncionariosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionariosPayload>[]
          }
          create: {
            args: Prisma.FuncionariosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionariosPayload>
          }
          createMany: {
            args: Prisma.FuncionariosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FuncionariosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionariosPayload>
          }
          update: {
            args: Prisma.FuncionariosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionariosPayload>
          }
          deleteMany: {
            args: Prisma.FuncionariosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FuncionariosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FuncionariosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FuncionariosPayload>
          }
          aggregate: {
            args: Prisma.FuncionariosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFuncionarios>
          }
          groupBy: {
            args: Prisma.FuncionariosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FuncionariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.FuncionariosCountArgs<ExtArgs>,
            result: $Utils.Optional<FuncionariosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model estoque
   */

  export type AggregateEstoque = {
    _count: EstoqueCountAggregateOutputType | null
    _avg: EstoqueAvgAggregateOutputType | null
    _sum: EstoqueSumAggregateOutputType | null
    _min: EstoqueMinAggregateOutputType | null
    _max: EstoqueMaxAggregateOutputType | null
  }

  export type EstoqueAvgAggregateOutputType = {
    id_do_tecido: number | null
    valor: number | null
    largura: number | null
    peso: number | null
    estoque: number | null
  }

  export type EstoqueSumAggregateOutputType = {
    id_do_tecido: number | null
    valor: number | null
    largura: number | null
    peso: number | null
    estoque: number | null
  }

  export type EstoqueMinAggregateOutputType = {
    id_do_tecido: number | null
    nome_do_tecido: string | null
    valor: number | null
    fornecedor: string | null
    composicao: string | null
    largura: number | null
    peso: number | null
    estoque: number | null
    data: Date | null
    notas: string | null
  }

  export type EstoqueMaxAggregateOutputType = {
    id_do_tecido: number | null
    nome_do_tecido: string | null
    valor: number | null
    fornecedor: string | null
    composicao: string | null
    largura: number | null
    peso: number | null
    estoque: number | null
    data: Date | null
    notas: string | null
  }

  export type EstoqueCountAggregateOutputType = {
    id_do_tecido: number
    nome_do_tecido: number
    valor: number
    fornecedor: number
    composicao: number
    largura: number
    peso: number
    estoque: number
    data: number
    notas: number
    _all: number
  }


  export type EstoqueAvgAggregateInputType = {
    id_do_tecido?: true
    valor?: true
    largura?: true
    peso?: true
    estoque?: true
  }

  export type EstoqueSumAggregateInputType = {
    id_do_tecido?: true
    valor?: true
    largura?: true
    peso?: true
    estoque?: true
  }

  export type EstoqueMinAggregateInputType = {
    id_do_tecido?: true
    nome_do_tecido?: true
    valor?: true
    fornecedor?: true
    composicao?: true
    largura?: true
    peso?: true
    estoque?: true
    data?: true
    notas?: true
  }

  export type EstoqueMaxAggregateInputType = {
    id_do_tecido?: true
    nome_do_tecido?: true
    valor?: true
    fornecedor?: true
    composicao?: true
    largura?: true
    peso?: true
    estoque?: true
    data?: true
    notas?: true
  }

  export type EstoqueCountAggregateInputType = {
    id_do_tecido?: true
    nome_do_tecido?: true
    valor?: true
    fornecedor?: true
    composicao?: true
    largura?: true
    peso?: true
    estoque?: true
    data?: true
    notas?: true
    _all?: true
  }

  export type EstoqueAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which estoque to aggregate.
     */
    where?: estoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of estoques to fetch.
     */
    orderBy?: estoqueOrderByWithRelationInput | estoqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: estoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` estoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` estoques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned estoques
    **/
    _count?: true | EstoqueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EstoqueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EstoqueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EstoqueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EstoqueMaxAggregateInputType
  }

  export type GetEstoqueAggregateType<T extends EstoqueAggregateArgs> = {
        [P in keyof T & keyof AggregateEstoque]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstoque[P]>
      : GetScalarType<T[P], AggregateEstoque[P]>
  }




  export type estoqueGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: estoqueWhereInput
    orderBy?: estoqueOrderByWithAggregationInput | estoqueOrderByWithAggregationInput[]
    by: EstoqueScalarFieldEnum[] | EstoqueScalarFieldEnum
    having?: estoqueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EstoqueCountAggregateInputType | true
    _avg?: EstoqueAvgAggregateInputType
    _sum?: EstoqueSumAggregateInputType
    _min?: EstoqueMinAggregateInputType
    _max?: EstoqueMaxAggregateInputType
  }

  export type EstoqueGroupByOutputType = {
    id_do_tecido: number
    nome_do_tecido: string
    valor: number
    fornecedor: string
    composicao: string | null
    largura: number | null
    peso: number | null
    estoque: number
    data: Date
    notas: string | null
    _count: EstoqueCountAggregateOutputType | null
    _avg: EstoqueAvgAggregateOutputType | null
    _sum: EstoqueSumAggregateOutputType | null
    _min: EstoqueMinAggregateOutputType | null
    _max: EstoqueMaxAggregateOutputType | null
  }

  type GetEstoqueGroupByPayload<T extends estoqueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EstoqueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EstoqueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EstoqueGroupByOutputType[P]>
            : GetScalarType<T[P], EstoqueGroupByOutputType[P]>
        }
      >
    >


  export type estoqueSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_do_tecido?: boolean
    nome_do_tecido?: boolean
    valor?: boolean
    fornecedor?: boolean
    composicao?: boolean
    largura?: boolean
    peso?: boolean
    estoque?: boolean
    data?: boolean
    notas?: boolean
  }, ExtArgs["result"]["estoque"]>

  export type estoqueSelectScalar = {
    id_do_tecido?: boolean
    nome_do_tecido?: boolean
    valor?: boolean
    fornecedor?: boolean
    composicao?: boolean
    largura?: boolean
    peso?: boolean
    estoque?: boolean
    data?: boolean
    notas?: boolean
  }


  export type $estoquePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "estoque"
    objects: {}
    scalars: $Extensions.GetResult<{
      id_do_tecido: number
      nome_do_tecido: string
      valor: number
      fornecedor: string
      composicao: string | null
      largura: number | null
      peso: number | null
      estoque: number
      data: Date
      notas: string | null
    }, ExtArgs["result"]["estoque"]>
    composites: {}
  }


  type estoqueGetPayload<S extends boolean | null | undefined | estoqueDefaultArgs> = $Result.GetResult<Prisma.$estoquePayload, S>

  type estoqueCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<estoqueFindManyArgs, 'select' | 'include'> & {
      select?: EstoqueCountAggregateInputType | true
    }

  export interface estoqueDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['estoque'], meta: { name: 'estoque' } }
    /**
     * Find zero or one Estoque that matches the filter.
     * @param {estoqueFindUniqueArgs} args - Arguments to find a Estoque
     * @example
     * // Get one Estoque
     * const estoque = await prisma.estoque.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends estoqueFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, estoqueFindUniqueArgs<ExtArgs>>
    ): Prisma__estoqueClient<$Result.GetResult<Prisma.$estoquePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Estoque that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {estoqueFindUniqueOrThrowArgs} args - Arguments to find a Estoque
     * @example
     * // Get one Estoque
     * const estoque = await prisma.estoque.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends estoqueFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, estoqueFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__estoqueClient<$Result.GetResult<Prisma.$estoquePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Estoque that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {estoqueFindFirstArgs} args - Arguments to find a Estoque
     * @example
     * // Get one Estoque
     * const estoque = await prisma.estoque.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends estoqueFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, estoqueFindFirstArgs<ExtArgs>>
    ): Prisma__estoqueClient<$Result.GetResult<Prisma.$estoquePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Estoque that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {estoqueFindFirstOrThrowArgs} args - Arguments to find a Estoque
     * @example
     * // Get one Estoque
     * const estoque = await prisma.estoque.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends estoqueFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, estoqueFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__estoqueClient<$Result.GetResult<Prisma.$estoquePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Estoques that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {estoqueFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Estoques
     * const estoques = await prisma.estoque.findMany()
     * 
     * // Get first 10 Estoques
     * const estoques = await prisma.estoque.findMany({ take: 10 })
     * 
     * // Only select the `id_do_tecido`
     * const estoqueWithId_do_tecidoOnly = await prisma.estoque.findMany({ select: { id_do_tecido: true } })
     * 
    **/
    findMany<T extends estoqueFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, estoqueFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$estoquePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Estoque.
     * @param {estoqueCreateArgs} args - Arguments to create a Estoque.
     * @example
     * // Create one Estoque
     * const Estoque = await prisma.estoque.create({
     *   data: {
     *     // ... data to create a Estoque
     *   }
     * })
     * 
    **/
    create<T extends estoqueCreateArgs<ExtArgs>>(
      args: SelectSubset<T, estoqueCreateArgs<ExtArgs>>
    ): Prisma__estoqueClient<$Result.GetResult<Prisma.$estoquePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Estoques.
     *     @param {estoqueCreateManyArgs} args - Arguments to create many Estoques.
     *     @example
     *     // Create many Estoques
     *     const estoque = await prisma.estoque.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends estoqueCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, estoqueCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Estoque.
     * @param {estoqueDeleteArgs} args - Arguments to delete one Estoque.
     * @example
     * // Delete one Estoque
     * const Estoque = await prisma.estoque.delete({
     *   where: {
     *     // ... filter to delete one Estoque
     *   }
     * })
     * 
    **/
    delete<T extends estoqueDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, estoqueDeleteArgs<ExtArgs>>
    ): Prisma__estoqueClient<$Result.GetResult<Prisma.$estoquePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Estoque.
     * @param {estoqueUpdateArgs} args - Arguments to update one Estoque.
     * @example
     * // Update one Estoque
     * const estoque = await prisma.estoque.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends estoqueUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, estoqueUpdateArgs<ExtArgs>>
    ): Prisma__estoqueClient<$Result.GetResult<Prisma.$estoquePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Estoques.
     * @param {estoqueDeleteManyArgs} args - Arguments to filter Estoques to delete.
     * @example
     * // Delete a few Estoques
     * const { count } = await prisma.estoque.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends estoqueDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, estoqueDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Estoques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {estoqueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Estoques
     * const estoque = await prisma.estoque.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends estoqueUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, estoqueUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Estoque.
     * @param {estoqueUpsertArgs} args - Arguments to update or create a Estoque.
     * @example
     * // Update or create a Estoque
     * const estoque = await prisma.estoque.upsert({
     *   create: {
     *     // ... data to create a Estoque
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Estoque we want to update
     *   }
     * })
    **/
    upsert<T extends estoqueUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, estoqueUpsertArgs<ExtArgs>>
    ): Prisma__estoqueClient<$Result.GetResult<Prisma.$estoquePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Estoques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {estoqueCountArgs} args - Arguments to filter Estoques to count.
     * @example
     * // Count the number of Estoques
     * const count = await prisma.estoque.count({
     *   where: {
     *     // ... the filter for the Estoques we want to count
     *   }
     * })
    **/
    count<T extends estoqueCountArgs>(
      args?: Subset<T, estoqueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EstoqueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Estoque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstoqueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EstoqueAggregateArgs>(args: Subset<T, EstoqueAggregateArgs>): Prisma.PrismaPromise<GetEstoqueAggregateType<T>>

    /**
     * Group by Estoque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {estoqueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends estoqueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: estoqueGroupByArgs['orderBy'] }
        : { orderBy?: estoqueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, estoqueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstoqueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the estoque model
   */
  readonly fields: estoqueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for estoque.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__estoqueClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the estoque model
   */ 
  interface estoqueFieldRefs {
    readonly id_do_tecido: FieldRef<"estoque", 'Int'>
    readonly nome_do_tecido: FieldRef<"estoque", 'String'>
    readonly valor: FieldRef<"estoque", 'Float'>
    readonly fornecedor: FieldRef<"estoque", 'String'>
    readonly composicao: FieldRef<"estoque", 'String'>
    readonly largura: FieldRef<"estoque", 'Float'>
    readonly peso: FieldRef<"estoque", 'Float'>
    readonly estoque: FieldRef<"estoque", 'Int'>
    readonly data: FieldRef<"estoque", 'DateTime'>
    readonly notas: FieldRef<"estoque", 'String'>
  }
    

  // Custom InputTypes

  /**
   * estoque findUnique
   */
  export type estoqueFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the estoque
     */
    select?: estoqueSelect<ExtArgs> | null
    /**
     * Filter, which estoque to fetch.
     */
    where: estoqueWhereUniqueInput
  }


  /**
   * estoque findUniqueOrThrow
   */
  export type estoqueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the estoque
     */
    select?: estoqueSelect<ExtArgs> | null
    /**
     * Filter, which estoque to fetch.
     */
    where: estoqueWhereUniqueInput
  }


  /**
   * estoque findFirst
   */
  export type estoqueFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the estoque
     */
    select?: estoqueSelect<ExtArgs> | null
    /**
     * Filter, which estoque to fetch.
     */
    where?: estoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of estoques to fetch.
     */
    orderBy?: estoqueOrderByWithRelationInput | estoqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for estoques.
     */
    cursor?: estoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` estoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` estoques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of estoques.
     */
    distinct?: EstoqueScalarFieldEnum | EstoqueScalarFieldEnum[]
  }


  /**
   * estoque findFirstOrThrow
   */
  export type estoqueFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the estoque
     */
    select?: estoqueSelect<ExtArgs> | null
    /**
     * Filter, which estoque to fetch.
     */
    where?: estoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of estoques to fetch.
     */
    orderBy?: estoqueOrderByWithRelationInput | estoqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for estoques.
     */
    cursor?: estoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` estoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` estoques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of estoques.
     */
    distinct?: EstoqueScalarFieldEnum | EstoqueScalarFieldEnum[]
  }


  /**
   * estoque findMany
   */
  export type estoqueFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the estoque
     */
    select?: estoqueSelect<ExtArgs> | null
    /**
     * Filter, which estoques to fetch.
     */
    where?: estoqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of estoques to fetch.
     */
    orderBy?: estoqueOrderByWithRelationInput | estoqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing estoques.
     */
    cursor?: estoqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` estoques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` estoques.
     */
    skip?: number
    distinct?: EstoqueScalarFieldEnum | EstoqueScalarFieldEnum[]
  }


  /**
   * estoque create
   */
  export type estoqueCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the estoque
     */
    select?: estoqueSelect<ExtArgs> | null
    /**
     * The data needed to create a estoque.
     */
    data: XOR<estoqueCreateInput, estoqueUncheckedCreateInput>
  }


  /**
   * estoque createMany
   */
  export type estoqueCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many estoques.
     */
    data: estoqueCreateManyInput | estoqueCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * estoque update
   */
  export type estoqueUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the estoque
     */
    select?: estoqueSelect<ExtArgs> | null
    /**
     * The data needed to update a estoque.
     */
    data: XOR<estoqueUpdateInput, estoqueUncheckedUpdateInput>
    /**
     * Choose, which estoque to update.
     */
    where: estoqueWhereUniqueInput
  }


  /**
   * estoque updateMany
   */
  export type estoqueUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update estoques.
     */
    data: XOR<estoqueUpdateManyMutationInput, estoqueUncheckedUpdateManyInput>
    /**
     * Filter which estoques to update
     */
    where?: estoqueWhereInput
  }


  /**
   * estoque upsert
   */
  export type estoqueUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the estoque
     */
    select?: estoqueSelect<ExtArgs> | null
    /**
     * The filter to search for the estoque to update in case it exists.
     */
    where: estoqueWhereUniqueInput
    /**
     * In case the estoque found by the `where` argument doesn't exist, create a new estoque with this data.
     */
    create: XOR<estoqueCreateInput, estoqueUncheckedCreateInput>
    /**
     * In case the estoque was found with the provided `where` argument, update it with this data.
     */
    update: XOR<estoqueUpdateInput, estoqueUncheckedUpdateInput>
  }


  /**
   * estoque delete
   */
  export type estoqueDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the estoque
     */
    select?: estoqueSelect<ExtArgs> | null
    /**
     * Filter which estoque to delete.
     */
    where: estoqueWhereUniqueInput
  }


  /**
   * estoque deleteMany
   */
  export type estoqueDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which estoques to delete
     */
    where?: estoqueWhereInput
  }


  /**
   * estoque without action
   */
  export type estoqueDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the estoque
     */
    select?: estoqueSelect<ExtArgs> | null
  }



  /**
   * Model Estoque_Agulhas
   */

  export type AggregateEstoque_Agulhas = {
    _count: Estoque_AgulhasCountAggregateOutputType | null
    _avg: Estoque_AgulhasAvgAggregateOutputType | null
    _sum: Estoque_AgulhasSumAggregateOutputType | null
    _min: Estoque_AgulhasMinAggregateOutputType | null
    _max: Estoque_AgulhasMaxAggregateOutputType | null
  }

  export type Estoque_AgulhasAvgAggregateOutputType = {
    id_da_agulha: number | null
    valor: number | null
    estoque: number | null
  }

  export type Estoque_AgulhasSumAggregateOutputType = {
    id_da_agulha: number | null
    valor: number | null
    estoque: number | null
  }

  export type Estoque_AgulhasMinAggregateOutputType = {
    id_da_agulha: number | null
    valor: number | null
    fornecedor: string | null
    numeracao: string | null
    estoque: number | null
    data: Date | null
    notas: string | null
  }

  export type Estoque_AgulhasMaxAggregateOutputType = {
    id_da_agulha: number | null
    valor: number | null
    fornecedor: string | null
    numeracao: string | null
    estoque: number | null
    data: Date | null
    notas: string | null
  }

  export type Estoque_AgulhasCountAggregateOutputType = {
    id_da_agulha: number
    valor: number
    fornecedor: number
    numeracao: number
    estoque: number
    data: number
    notas: number
    _all: number
  }


  export type Estoque_AgulhasAvgAggregateInputType = {
    id_da_agulha?: true
    valor?: true
    estoque?: true
  }

  export type Estoque_AgulhasSumAggregateInputType = {
    id_da_agulha?: true
    valor?: true
    estoque?: true
  }

  export type Estoque_AgulhasMinAggregateInputType = {
    id_da_agulha?: true
    valor?: true
    fornecedor?: true
    numeracao?: true
    estoque?: true
    data?: true
    notas?: true
  }

  export type Estoque_AgulhasMaxAggregateInputType = {
    id_da_agulha?: true
    valor?: true
    fornecedor?: true
    numeracao?: true
    estoque?: true
    data?: true
    notas?: true
  }

  export type Estoque_AgulhasCountAggregateInputType = {
    id_da_agulha?: true
    valor?: true
    fornecedor?: true
    numeracao?: true
    estoque?: true
    data?: true
    notas?: true
    _all?: true
  }

  export type Estoque_AgulhasAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estoque_Agulhas to aggregate.
     */
    where?: Estoque_AgulhasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estoque_Agulhas to fetch.
     */
    orderBy?: Estoque_AgulhasOrderByWithRelationInput | Estoque_AgulhasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Estoque_AgulhasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estoque_Agulhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estoque_Agulhas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Estoque_Agulhas
    **/
    _count?: true | Estoque_AgulhasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Estoque_AgulhasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Estoque_AgulhasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Estoque_AgulhasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Estoque_AgulhasMaxAggregateInputType
  }

  export type GetEstoque_AgulhasAggregateType<T extends Estoque_AgulhasAggregateArgs> = {
        [P in keyof T & keyof AggregateEstoque_Agulhas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstoque_Agulhas[P]>
      : GetScalarType<T[P], AggregateEstoque_Agulhas[P]>
  }




  export type Estoque_AgulhasGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: Estoque_AgulhasWhereInput
    orderBy?: Estoque_AgulhasOrderByWithAggregationInput | Estoque_AgulhasOrderByWithAggregationInput[]
    by: Estoque_AgulhasScalarFieldEnum[] | Estoque_AgulhasScalarFieldEnum
    having?: Estoque_AgulhasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Estoque_AgulhasCountAggregateInputType | true
    _avg?: Estoque_AgulhasAvgAggregateInputType
    _sum?: Estoque_AgulhasSumAggregateInputType
    _min?: Estoque_AgulhasMinAggregateInputType
    _max?: Estoque_AgulhasMaxAggregateInputType
  }

  export type Estoque_AgulhasGroupByOutputType = {
    id_da_agulha: number
    valor: number
    fornecedor: string | null
    numeracao: string | null
    estoque: number
    data: Date
    notas: string | null
    _count: Estoque_AgulhasCountAggregateOutputType | null
    _avg: Estoque_AgulhasAvgAggregateOutputType | null
    _sum: Estoque_AgulhasSumAggregateOutputType | null
    _min: Estoque_AgulhasMinAggregateOutputType | null
    _max: Estoque_AgulhasMaxAggregateOutputType | null
  }

  type GetEstoque_AgulhasGroupByPayload<T extends Estoque_AgulhasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Estoque_AgulhasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Estoque_AgulhasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Estoque_AgulhasGroupByOutputType[P]>
            : GetScalarType<T[P], Estoque_AgulhasGroupByOutputType[P]>
        }
      >
    >


  export type Estoque_AgulhasSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_da_agulha?: boolean
    valor?: boolean
    fornecedor?: boolean
    numeracao?: boolean
    estoque?: boolean
    data?: boolean
    notas?: boolean
  }, ExtArgs["result"]["estoque_Agulhas"]>

  export type Estoque_AgulhasSelectScalar = {
    id_da_agulha?: boolean
    valor?: boolean
    fornecedor?: boolean
    numeracao?: boolean
    estoque?: boolean
    data?: boolean
    notas?: boolean
  }


  export type $Estoque_AgulhasPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Estoque_Agulhas"
    objects: {}
    scalars: $Extensions.GetResult<{
      id_da_agulha: number
      valor: number
      fornecedor: string | null
      numeracao: string | null
      estoque: number
      data: Date
      notas: string | null
    }, ExtArgs["result"]["estoque_Agulhas"]>
    composites: {}
  }


  type Estoque_AgulhasGetPayload<S extends boolean | null | undefined | Estoque_AgulhasDefaultArgs> = $Result.GetResult<Prisma.$Estoque_AgulhasPayload, S>

  type Estoque_AgulhasCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<Estoque_AgulhasFindManyArgs, 'select' | 'include'> & {
      select?: Estoque_AgulhasCountAggregateInputType | true
    }

  export interface Estoque_AgulhasDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Estoque_Agulhas'], meta: { name: 'Estoque_Agulhas' } }
    /**
     * Find zero or one Estoque_Agulhas that matches the filter.
     * @param {Estoque_AgulhasFindUniqueArgs} args - Arguments to find a Estoque_Agulhas
     * @example
     * // Get one Estoque_Agulhas
     * const estoque_Agulhas = await prisma.estoque_Agulhas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Estoque_AgulhasFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Estoque_AgulhasFindUniqueArgs<ExtArgs>>
    ): Prisma__Estoque_AgulhasClient<$Result.GetResult<Prisma.$Estoque_AgulhasPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Estoque_Agulhas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Estoque_AgulhasFindUniqueOrThrowArgs} args - Arguments to find a Estoque_Agulhas
     * @example
     * // Get one Estoque_Agulhas
     * const estoque_Agulhas = await prisma.estoque_Agulhas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Estoque_AgulhasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Estoque_AgulhasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Estoque_AgulhasClient<$Result.GetResult<Prisma.$Estoque_AgulhasPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Estoque_Agulhas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Estoque_AgulhasFindFirstArgs} args - Arguments to find a Estoque_Agulhas
     * @example
     * // Get one Estoque_Agulhas
     * const estoque_Agulhas = await prisma.estoque_Agulhas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Estoque_AgulhasFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Estoque_AgulhasFindFirstArgs<ExtArgs>>
    ): Prisma__Estoque_AgulhasClient<$Result.GetResult<Prisma.$Estoque_AgulhasPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Estoque_Agulhas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Estoque_AgulhasFindFirstOrThrowArgs} args - Arguments to find a Estoque_Agulhas
     * @example
     * // Get one Estoque_Agulhas
     * const estoque_Agulhas = await prisma.estoque_Agulhas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Estoque_AgulhasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Estoque_AgulhasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Estoque_AgulhasClient<$Result.GetResult<Prisma.$Estoque_AgulhasPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Estoque_Agulhas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Estoque_AgulhasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Estoque_Agulhas
     * const estoque_Agulhas = await prisma.estoque_Agulhas.findMany()
     * 
     * // Get first 10 Estoque_Agulhas
     * const estoque_Agulhas = await prisma.estoque_Agulhas.findMany({ take: 10 })
     * 
     * // Only select the `id_da_agulha`
     * const estoque_AgulhasWithId_da_agulhaOnly = await prisma.estoque_Agulhas.findMany({ select: { id_da_agulha: true } })
     * 
    **/
    findMany<T extends Estoque_AgulhasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Estoque_AgulhasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Estoque_AgulhasPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Estoque_Agulhas.
     * @param {Estoque_AgulhasCreateArgs} args - Arguments to create a Estoque_Agulhas.
     * @example
     * // Create one Estoque_Agulhas
     * const Estoque_Agulhas = await prisma.estoque_Agulhas.create({
     *   data: {
     *     // ... data to create a Estoque_Agulhas
     *   }
     * })
     * 
    **/
    create<T extends Estoque_AgulhasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Estoque_AgulhasCreateArgs<ExtArgs>>
    ): Prisma__Estoque_AgulhasClient<$Result.GetResult<Prisma.$Estoque_AgulhasPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Estoque_Agulhas.
     *     @param {Estoque_AgulhasCreateManyArgs} args - Arguments to create many Estoque_Agulhas.
     *     @example
     *     // Create many Estoque_Agulhas
     *     const estoque_Agulhas = await prisma.estoque_Agulhas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Estoque_AgulhasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Estoque_AgulhasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Estoque_Agulhas.
     * @param {Estoque_AgulhasDeleteArgs} args - Arguments to delete one Estoque_Agulhas.
     * @example
     * // Delete one Estoque_Agulhas
     * const Estoque_Agulhas = await prisma.estoque_Agulhas.delete({
     *   where: {
     *     // ... filter to delete one Estoque_Agulhas
     *   }
     * })
     * 
    **/
    delete<T extends Estoque_AgulhasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Estoque_AgulhasDeleteArgs<ExtArgs>>
    ): Prisma__Estoque_AgulhasClient<$Result.GetResult<Prisma.$Estoque_AgulhasPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Estoque_Agulhas.
     * @param {Estoque_AgulhasUpdateArgs} args - Arguments to update one Estoque_Agulhas.
     * @example
     * // Update one Estoque_Agulhas
     * const estoque_Agulhas = await prisma.estoque_Agulhas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Estoque_AgulhasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Estoque_AgulhasUpdateArgs<ExtArgs>>
    ): Prisma__Estoque_AgulhasClient<$Result.GetResult<Prisma.$Estoque_AgulhasPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Estoque_Agulhas.
     * @param {Estoque_AgulhasDeleteManyArgs} args - Arguments to filter Estoque_Agulhas to delete.
     * @example
     * // Delete a few Estoque_Agulhas
     * const { count } = await prisma.estoque_Agulhas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Estoque_AgulhasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Estoque_AgulhasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Estoque_Agulhas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Estoque_AgulhasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Estoque_Agulhas
     * const estoque_Agulhas = await prisma.estoque_Agulhas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Estoque_AgulhasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Estoque_AgulhasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Estoque_Agulhas.
     * @param {Estoque_AgulhasUpsertArgs} args - Arguments to update or create a Estoque_Agulhas.
     * @example
     * // Update or create a Estoque_Agulhas
     * const estoque_Agulhas = await prisma.estoque_Agulhas.upsert({
     *   create: {
     *     // ... data to create a Estoque_Agulhas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Estoque_Agulhas we want to update
     *   }
     * })
    **/
    upsert<T extends Estoque_AgulhasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Estoque_AgulhasUpsertArgs<ExtArgs>>
    ): Prisma__Estoque_AgulhasClient<$Result.GetResult<Prisma.$Estoque_AgulhasPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Estoque_Agulhas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Estoque_AgulhasCountArgs} args - Arguments to filter Estoque_Agulhas to count.
     * @example
     * // Count the number of Estoque_Agulhas
     * const count = await prisma.estoque_Agulhas.count({
     *   where: {
     *     // ... the filter for the Estoque_Agulhas we want to count
     *   }
     * })
    **/
    count<T extends Estoque_AgulhasCountArgs>(
      args?: Subset<T, Estoque_AgulhasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Estoque_AgulhasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Estoque_Agulhas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Estoque_AgulhasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Estoque_AgulhasAggregateArgs>(args: Subset<T, Estoque_AgulhasAggregateArgs>): Prisma.PrismaPromise<GetEstoque_AgulhasAggregateType<T>>

    /**
     * Group by Estoque_Agulhas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Estoque_AgulhasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Estoque_AgulhasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Estoque_AgulhasGroupByArgs['orderBy'] }
        : { orderBy?: Estoque_AgulhasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Estoque_AgulhasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstoque_AgulhasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Estoque_Agulhas model
   */
  readonly fields: Estoque_AgulhasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Estoque_Agulhas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Estoque_AgulhasClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Estoque_Agulhas model
   */ 
  interface Estoque_AgulhasFieldRefs {
    readonly id_da_agulha: FieldRef<"Estoque_Agulhas", 'Int'>
    readonly valor: FieldRef<"Estoque_Agulhas", 'Float'>
    readonly fornecedor: FieldRef<"Estoque_Agulhas", 'String'>
    readonly numeracao: FieldRef<"Estoque_Agulhas", 'String'>
    readonly estoque: FieldRef<"Estoque_Agulhas", 'Int'>
    readonly data: FieldRef<"Estoque_Agulhas", 'DateTime'>
    readonly notas: FieldRef<"Estoque_Agulhas", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Estoque_Agulhas findUnique
   */
  export type Estoque_AgulhasFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque_Agulhas
     */
    select?: Estoque_AgulhasSelect<ExtArgs> | null
    /**
     * Filter, which Estoque_Agulhas to fetch.
     */
    where: Estoque_AgulhasWhereUniqueInput
  }


  /**
   * Estoque_Agulhas findUniqueOrThrow
   */
  export type Estoque_AgulhasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque_Agulhas
     */
    select?: Estoque_AgulhasSelect<ExtArgs> | null
    /**
     * Filter, which Estoque_Agulhas to fetch.
     */
    where: Estoque_AgulhasWhereUniqueInput
  }


  /**
   * Estoque_Agulhas findFirst
   */
  export type Estoque_AgulhasFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque_Agulhas
     */
    select?: Estoque_AgulhasSelect<ExtArgs> | null
    /**
     * Filter, which Estoque_Agulhas to fetch.
     */
    where?: Estoque_AgulhasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estoque_Agulhas to fetch.
     */
    orderBy?: Estoque_AgulhasOrderByWithRelationInput | Estoque_AgulhasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estoque_Agulhas.
     */
    cursor?: Estoque_AgulhasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estoque_Agulhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estoque_Agulhas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estoque_Agulhas.
     */
    distinct?: Estoque_AgulhasScalarFieldEnum | Estoque_AgulhasScalarFieldEnum[]
  }


  /**
   * Estoque_Agulhas findFirstOrThrow
   */
  export type Estoque_AgulhasFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque_Agulhas
     */
    select?: Estoque_AgulhasSelect<ExtArgs> | null
    /**
     * Filter, which Estoque_Agulhas to fetch.
     */
    where?: Estoque_AgulhasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estoque_Agulhas to fetch.
     */
    orderBy?: Estoque_AgulhasOrderByWithRelationInput | Estoque_AgulhasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estoque_Agulhas.
     */
    cursor?: Estoque_AgulhasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estoque_Agulhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estoque_Agulhas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estoque_Agulhas.
     */
    distinct?: Estoque_AgulhasScalarFieldEnum | Estoque_AgulhasScalarFieldEnum[]
  }


  /**
   * Estoque_Agulhas findMany
   */
  export type Estoque_AgulhasFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque_Agulhas
     */
    select?: Estoque_AgulhasSelect<ExtArgs> | null
    /**
     * Filter, which Estoque_Agulhas to fetch.
     */
    where?: Estoque_AgulhasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estoque_Agulhas to fetch.
     */
    orderBy?: Estoque_AgulhasOrderByWithRelationInput | Estoque_AgulhasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Estoque_Agulhas.
     */
    cursor?: Estoque_AgulhasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estoque_Agulhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estoque_Agulhas.
     */
    skip?: number
    distinct?: Estoque_AgulhasScalarFieldEnum | Estoque_AgulhasScalarFieldEnum[]
  }


  /**
   * Estoque_Agulhas create
   */
  export type Estoque_AgulhasCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque_Agulhas
     */
    select?: Estoque_AgulhasSelect<ExtArgs> | null
    /**
     * The data needed to create a Estoque_Agulhas.
     */
    data: XOR<Estoque_AgulhasCreateInput, Estoque_AgulhasUncheckedCreateInput>
  }


  /**
   * Estoque_Agulhas createMany
   */
  export type Estoque_AgulhasCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Estoque_Agulhas.
     */
    data: Estoque_AgulhasCreateManyInput | Estoque_AgulhasCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Estoque_Agulhas update
   */
  export type Estoque_AgulhasUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque_Agulhas
     */
    select?: Estoque_AgulhasSelect<ExtArgs> | null
    /**
     * The data needed to update a Estoque_Agulhas.
     */
    data: XOR<Estoque_AgulhasUpdateInput, Estoque_AgulhasUncheckedUpdateInput>
    /**
     * Choose, which Estoque_Agulhas to update.
     */
    where: Estoque_AgulhasWhereUniqueInput
  }


  /**
   * Estoque_Agulhas updateMany
   */
  export type Estoque_AgulhasUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Estoque_Agulhas.
     */
    data: XOR<Estoque_AgulhasUpdateManyMutationInput, Estoque_AgulhasUncheckedUpdateManyInput>
    /**
     * Filter which Estoque_Agulhas to update
     */
    where?: Estoque_AgulhasWhereInput
  }


  /**
   * Estoque_Agulhas upsert
   */
  export type Estoque_AgulhasUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque_Agulhas
     */
    select?: Estoque_AgulhasSelect<ExtArgs> | null
    /**
     * The filter to search for the Estoque_Agulhas to update in case it exists.
     */
    where: Estoque_AgulhasWhereUniqueInput
    /**
     * In case the Estoque_Agulhas found by the `where` argument doesn't exist, create a new Estoque_Agulhas with this data.
     */
    create: XOR<Estoque_AgulhasCreateInput, Estoque_AgulhasUncheckedCreateInput>
    /**
     * In case the Estoque_Agulhas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Estoque_AgulhasUpdateInput, Estoque_AgulhasUncheckedUpdateInput>
  }


  /**
   * Estoque_Agulhas delete
   */
  export type Estoque_AgulhasDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque_Agulhas
     */
    select?: Estoque_AgulhasSelect<ExtArgs> | null
    /**
     * Filter which Estoque_Agulhas to delete.
     */
    where: Estoque_AgulhasWhereUniqueInput
  }


  /**
   * Estoque_Agulhas deleteMany
   */
  export type Estoque_AgulhasDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estoque_Agulhas to delete
     */
    where?: Estoque_AgulhasWhereInput
  }


  /**
   * Estoque_Agulhas without action
   */
  export type Estoque_AgulhasDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estoque_Agulhas
     */
    select?: Estoque_AgulhasSelect<ExtArgs> | null
  }



  /**
   * Model Funcionarios
   */

  export type AggregateFuncionarios = {
    _count: FuncionariosCountAggregateOutputType | null
    _avg: FuncionariosAvgAggregateOutputType | null
    _sum: FuncionariosSumAggregateOutputType | null
    _min: FuncionariosMinAggregateOutputType | null
    _max: FuncionariosMaxAggregateOutputType | null
  }

  export type FuncionariosAvgAggregateOutputType = {
    id: number | null
  }

  export type FuncionariosSumAggregateOutputType = {
    id: number | null
  }

  export type FuncionariosMinAggregateOutputType = {
    id: number | null
    nome_do_funcionario: string | null
    idade: string | null
    funcoes: string | null
    data: Date | null
    notas: string | null
  }

  export type FuncionariosMaxAggregateOutputType = {
    id: number | null
    nome_do_funcionario: string | null
    idade: string | null
    funcoes: string | null
    data: Date | null
    notas: string | null
  }

  export type FuncionariosCountAggregateOutputType = {
    id: number
    nome_do_funcionario: number
    idade: number
    funcoes: number
    data: number
    notas: number
    _all: number
  }


  export type FuncionariosAvgAggregateInputType = {
    id?: true
  }

  export type FuncionariosSumAggregateInputType = {
    id?: true
  }

  export type FuncionariosMinAggregateInputType = {
    id?: true
    nome_do_funcionario?: true
    idade?: true
    funcoes?: true
    data?: true
    notas?: true
  }

  export type FuncionariosMaxAggregateInputType = {
    id?: true
    nome_do_funcionario?: true
    idade?: true
    funcoes?: true
    data?: true
    notas?: true
  }

  export type FuncionariosCountAggregateInputType = {
    id?: true
    nome_do_funcionario?: true
    idade?: true
    funcoes?: true
    data?: true
    notas?: true
    _all?: true
  }

  export type FuncionariosAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Funcionarios to aggregate.
     */
    where?: FuncionariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     */
    orderBy?: FuncionariosOrderByWithRelationInput | FuncionariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FuncionariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Funcionarios
    **/
    _count?: true | FuncionariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FuncionariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FuncionariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FuncionariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FuncionariosMaxAggregateInputType
  }

  export type GetFuncionariosAggregateType<T extends FuncionariosAggregateArgs> = {
        [P in keyof T & keyof AggregateFuncionarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFuncionarios[P]>
      : GetScalarType<T[P], AggregateFuncionarios[P]>
  }




  export type FuncionariosGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FuncionariosWhereInput
    orderBy?: FuncionariosOrderByWithAggregationInput | FuncionariosOrderByWithAggregationInput[]
    by: FuncionariosScalarFieldEnum[] | FuncionariosScalarFieldEnum
    having?: FuncionariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FuncionariosCountAggregateInputType | true
    _avg?: FuncionariosAvgAggregateInputType
    _sum?: FuncionariosSumAggregateInputType
    _min?: FuncionariosMinAggregateInputType
    _max?: FuncionariosMaxAggregateInputType
  }

  export type FuncionariosGroupByOutputType = {
    id: number
    nome_do_funcionario: string
    idade: string
    funcoes: string
    data: Date
    notas: string | null
    _count: FuncionariosCountAggregateOutputType | null
    _avg: FuncionariosAvgAggregateOutputType | null
    _sum: FuncionariosSumAggregateOutputType | null
    _min: FuncionariosMinAggregateOutputType | null
    _max: FuncionariosMaxAggregateOutputType | null
  }

  type GetFuncionariosGroupByPayload<T extends FuncionariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FuncionariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FuncionariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FuncionariosGroupByOutputType[P]>
            : GetScalarType<T[P], FuncionariosGroupByOutputType[P]>
        }
      >
    >


  export type FuncionariosSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome_do_funcionario?: boolean
    idade?: boolean
    funcoes?: boolean
    data?: boolean
    notas?: boolean
  }, ExtArgs["result"]["funcionarios"]>

  export type FuncionariosSelectScalar = {
    id?: boolean
    nome_do_funcionario?: boolean
    idade?: boolean
    funcoes?: boolean
    data?: boolean
    notas?: boolean
  }


  export type $FuncionariosPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Funcionarios"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      nome_do_funcionario: string
      idade: string
      funcoes: string
      data: Date
      notas: string | null
    }, ExtArgs["result"]["funcionarios"]>
    composites: {}
  }


  type FuncionariosGetPayload<S extends boolean | null | undefined | FuncionariosDefaultArgs> = $Result.GetResult<Prisma.$FuncionariosPayload, S>

  type FuncionariosCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FuncionariosFindManyArgs, 'select' | 'include'> & {
      select?: FuncionariosCountAggregateInputType | true
    }

  export interface FuncionariosDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Funcionarios'], meta: { name: 'Funcionarios' } }
    /**
     * Find zero or one Funcionarios that matches the filter.
     * @param {FuncionariosFindUniqueArgs} args - Arguments to find a Funcionarios
     * @example
     * // Get one Funcionarios
     * const funcionarios = await prisma.funcionarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FuncionariosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FuncionariosFindUniqueArgs<ExtArgs>>
    ): Prisma__FuncionariosClient<$Result.GetResult<Prisma.$FuncionariosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Funcionarios that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FuncionariosFindUniqueOrThrowArgs} args - Arguments to find a Funcionarios
     * @example
     * // Get one Funcionarios
     * const funcionarios = await prisma.funcionarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FuncionariosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncionariosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FuncionariosClient<$Result.GetResult<Prisma.$FuncionariosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Funcionarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionariosFindFirstArgs} args - Arguments to find a Funcionarios
     * @example
     * // Get one Funcionarios
     * const funcionarios = await prisma.funcionarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FuncionariosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncionariosFindFirstArgs<ExtArgs>>
    ): Prisma__FuncionariosClient<$Result.GetResult<Prisma.$FuncionariosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Funcionarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionariosFindFirstOrThrowArgs} args - Arguments to find a Funcionarios
     * @example
     * // Get one Funcionarios
     * const funcionarios = await prisma.funcionarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FuncionariosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncionariosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FuncionariosClient<$Result.GetResult<Prisma.$FuncionariosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Funcionarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionariosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Funcionarios
     * const funcionarios = await prisma.funcionarios.findMany()
     * 
     * // Get first 10 Funcionarios
     * const funcionarios = await prisma.funcionarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const funcionariosWithIdOnly = await prisma.funcionarios.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FuncionariosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncionariosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FuncionariosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Funcionarios.
     * @param {FuncionariosCreateArgs} args - Arguments to create a Funcionarios.
     * @example
     * // Create one Funcionarios
     * const Funcionarios = await prisma.funcionarios.create({
     *   data: {
     *     // ... data to create a Funcionarios
     *   }
     * })
     * 
    **/
    create<T extends FuncionariosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FuncionariosCreateArgs<ExtArgs>>
    ): Prisma__FuncionariosClient<$Result.GetResult<Prisma.$FuncionariosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Funcionarios.
     *     @param {FuncionariosCreateManyArgs} args - Arguments to create many Funcionarios.
     *     @example
     *     // Create many Funcionarios
     *     const funcionarios = await prisma.funcionarios.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FuncionariosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncionariosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Funcionarios.
     * @param {FuncionariosDeleteArgs} args - Arguments to delete one Funcionarios.
     * @example
     * // Delete one Funcionarios
     * const Funcionarios = await prisma.funcionarios.delete({
     *   where: {
     *     // ... filter to delete one Funcionarios
     *   }
     * })
     * 
    **/
    delete<T extends FuncionariosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FuncionariosDeleteArgs<ExtArgs>>
    ): Prisma__FuncionariosClient<$Result.GetResult<Prisma.$FuncionariosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Funcionarios.
     * @param {FuncionariosUpdateArgs} args - Arguments to update one Funcionarios.
     * @example
     * // Update one Funcionarios
     * const funcionarios = await prisma.funcionarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FuncionariosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FuncionariosUpdateArgs<ExtArgs>>
    ): Prisma__FuncionariosClient<$Result.GetResult<Prisma.$FuncionariosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Funcionarios.
     * @param {FuncionariosDeleteManyArgs} args - Arguments to filter Funcionarios to delete.
     * @example
     * // Delete a few Funcionarios
     * const { count } = await prisma.funcionarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FuncionariosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FuncionariosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Funcionarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Funcionarios
     * const funcionarios = await prisma.funcionarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FuncionariosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FuncionariosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Funcionarios.
     * @param {FuncionariosUpsertArgs} args - Arguments to update or create a Funcionarios.
     * @example
     * // Update or create a Funcionarios
     * const funcionarios = await prisma.funcionarios.upsert({
     *   create: {
     *     // ... data to create a Funcionarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Funcionarios we want to update
     *   }
     * })
    **/
    upsert<T extends FuncionariosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FuncionariosUpsertArgs<ExtArgs>>
    ): Prisma__FuncionariosClient<$Result.GetResult<Prisma.$FuncionariosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Funcionarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionariosCountArgs} args - Arguments to filter Funcionarios to count.
     * @example
     * // Count the number of Funcionarios
     * const count = await prisma.funcionarios.count({
     *   where: {
     *     // ... the filter for the Funcionarios we want to count
     *   }
     * })
    **/
    count<T extends FuncionariosCountArgs>(
      args?: Subset<T, FuncionariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FuncionariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Funcionarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FuncionariosAggregateArgs>(args: Subset<T, FuncionariosAggregateArgs>): Prisma.PrismaPromise<GetFuncionariosAggregateType<T>>

    /**
     * Group by Funcionarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FuncionariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FuncionariosGroupByArgs['orderBy'] }
        : { orderBy?: FuncionariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FuncionariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFuncionariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Funcionarios model
   */
  readonly fields: FuncionariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Funcionarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FuncionariosClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Funcionarios model
   */ 
  interface FuncionariosFieldRefs {
    readonly id: FieldRef<"Funcionarios", 'Int'>
    readonly nome_do_funcionario: FieldRef<"Funcionarios", 'String'>
    readonly idade: FieldRef<"Funcionarios", 'String'>
    readonly funcoes: FieldRef<"Funcionarios", 'String'>
    readonly data: FieldRef<"Funcionarios", 'DateTime'>
    readonly notas: FieldRef<"Funcionarios", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Funcionarios findUnique
   */
  export type FuncionariosFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionarios
     */
    select?: FuncionariosSelect<ExtArgs> | null
    /**
     * Filter, which Funcionarios to fetch.
     */
    where: FuncionariosWhereUniqueInput
  }


  /**
   * Funcionarios findUniqueOrThrow
   */
  export type FuncionariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionarios
     */
    select?: FuncionariosSelect<ExtArgs> | null
    /**
     * Filter, which Funcionarios to fetch.
     */
    where: FuncionariosWhereUniqueInput
  }


  /**
   * Funcionarios findFirst
   */
  export type FuncionariosFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionarios
     */
    select?: FuncionariosSelect<ExtArgs> | null
    /**
     * Filter, which Funcionarios to fetch.
     */
    where?: FuncionariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     */
    orderBy?: FuncionariosOrderByWithRelationInput | FuncionariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funcionarios.
     */
    cursor?: FuncionariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funcionarios.
     */
    distinct?: FuncionariosScalarFieldEnum | FuncionariosScalarFieldEnum[]
  }


  /**
   * Funcionarios findFirstOrThrow
   */
  export type FuncionariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionarios
     */
    select?: FuncionariosSelect<ExtArgs> | null
    /**
     * Filter, which Funcionarios to fetch.
     */
    where?: FuncionariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     */
    orderBy?: FuncionariosOrderByWithRelationInput | FuncionariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funcionarios.
     */
    cursor?: FuncionariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funcionarios.
     */
    distinct?: FuncionariosScalarFieldEnum | FuncionariosScalarFieldEnum[]
  }


  /**
   * Funcionarios findMany
   */
  export type FuncionariosFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionarios
     */
    select?: FuncionariosSelect<ExtArgs> | null
    /**
     * Filter, which Funcionarios to fetch.
     */
    where?: FuncionariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     */
    orderBy?: FuncionariosOrderByWithRelationInput | FuncionariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Funcionarios.
     */
    cursor?: FuncionariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     */
    skip?: number
    distinct?: FuncionariosScalarFieldEnum | FuncionariosScalarFieldEnum[]
  }


  /**
   * Funcionarios create
   */
  export type FuncionariosCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionarios
     */
    select?: FuncionariosSelect<ExtArgs> | null
    /**
     * The data needed to create a Funcionarios.
     */
    data: XOR<FuncionariosCreateInput, FuncionariosUncheckedCreateInput>
  }


  /**
   * Funcionarios createMany
   */
  export type FuncionariosCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Funcionarios.
     */
    data: FuncionariosCreateManyInput | FuncionariosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Funcionarios update
   */
  export type FuncionariosUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionarios
     */
    select?: FuncionariosSelect<ExtArgs> | null
    /**
     * The data needed to update a Funcionarios.
     */
    data: XOR<FuncionariosUpdateInput, FuncionariosUncheckedUpdateInput>
    /**
     * Choose, which Funcionarios to update.
     */
    where: FuncionariosWhereUniqueInput
  }


  /**
   * Funcionarios updateMany
   */
  export type FuncionariosUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Funcionarios.
     */
    data: XOR<FuncionariosUpdateManyMutationInput, FuncionariosUncheckedUpdateManyInput>
    /**
     * Filter which Funcionarios to update
     */
    where?: FuncionariosWhereInput
  }


  /**
   * Funcionarios upsert
   */
  export type FuncionariosUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionarios
     */
    select?: FuncionariosSelect<ExtArgs> | null
    /**
     * The filter to search for the Funcionarios to update in case it exists.
     */
    where: FuncionariosWhereUniqueInput
    /**
     * In case the Funcionarios found by the `where` argument doesn't exist, create a new Funcionarios with this data.
     */
    create: XOR<FuncionariosCreateInput, FuncionariosUncheckedCreateInput>
    /**
     * In case the Funcionarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FuncionariosUpdateInput, FuncionariosUncheckedUpdateInput>
  }


  /**
   * Funcionarios delete
   */
  export type FuncionariosDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionarios
     */
    select?: FuncionariosSelect<ExtArgs> | null
    /**
     * Filter which Funcionarios to delete.
     */
    where: FuncionariosWhereUniqueInput
  }


  /**
   * Funcionarios deleteMany
   */
  export type FuncionariosDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Funcionarios to delete
     */
    where?: FuncionariosWhereInput
  }


  /**
   * Funcionarios without action
   */
  export type FuncionariosDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionarios
     */
    select?: FuncionariosSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EstoqueScalarFieldEnum: {
    id_do_tecido: 'id_do_tecido',
    nome_do_tecido: 'nome_do_tecido',
    valor: 'valor',
    fornecedor: 'fornecedor',
    composicao: 'composicao',
    largura: 'largura',
    peso: 'peso',
    estoque: 'estoque',
    data: 'data',
    notas: 'notas'
  };

  export type EstoqueScalarFieldEnum = (typeof EstoqueScalarFieldEnum)[keyof typeof EstoqueScalarFieldEnum]


  export const Estoque_AgulhasScalarFieldEnum: {
    id_da_agulha: 'id_da_agulha',
    valor: 'valor',
    fornecedor: 'fornecedor',
    numeracao: 'numeracao',
    estoque: 'estoque',
    data: 'data',
    notas: 'notas'
  };

  export type Estoque_AgulhasScalarFieldEnum = (typeof Estoque_AgulhasScalarFieldEnum)[keyof typeof Estoque_AgulhasScalarFieldEnum]


  export const FuncionariosScalarFieldEnum: {
    id: 'id',
    nome_do_funcionario: 'nome_do_funcionario',
    idade: 'idade',
    funcoes: 'funcoes',
    data: 'data',
    notas: 'notas'
  };

  export type FuncionariosScalarFieldEnum = (typeof FuncionariosScalarFieldEnum)[keyof typeof FuncionariosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type estoqueWhereInput = {
    AND?: estoqueWhereInput | estoqueWhereInput[]
    OR?: estoqueWhereInput[]
    NOT?: estoqueWhereInput | estoqueWhereInput[]
    id_do_tecido?: IntFilter<"estoque"> | number
    nome_do_tecido?: StringFilter<"estoque"> | string
    valor?: FloatFilter<"estoque"> | number
    fornecedor?: StringFilter<"estoque"> | string
    composicao?: StringNullableFilter<"estoque"> | string | null
    largura?: FloatNullableFilter<"estoque"> | number | null
    peso?: FloatNullableFilter<"estoque"> | number | null
    estoque?: IntFilter<"estoque"> | number
    data?: DateTimeFilter<"estoque"> | Date | string
    notas?: StringNullableFilter<"estoque"> | string | null
  }

  export type estoqueOrderByWithRelationInput = {
    id_do_tecido?: SortOrder
    nome_do_tecido?: SortOrder
    valor?: SortOrder
    fornecedor?: SortOrder
    composicao?: SortOrderInput | SortOrder
    largura?: SortOrderInput | SortOrder
    peso?: SortOrderInput | SortOrder
    estoque?: SortOrder
    data?: SortOrder
    notas?: SortOrderInput | SortOrder
  }

  export type estoqueWhereUniqueInput = Prisma.AtLeast<{
    id_do_tecido?: number
    AND?: estoqueWhereInput | estoqueWhereInput[]
    OR?: estoqueWhereInput[]
    NOT?: estoqueWhereInput | estoqueWhereInput[]
    nome_do_tecido?: StringFilter<"estoque"> | string
    valor?: FloatFilter<"estoque"> | number
    fornecedor?: StringFilter<"estoque"> | string
    composicao?: StringNullableFilter<"estoque"> | string | null
    largura?: FloatNullableFilter<"estoque"> | number | null
    peso?: FloatNullableFilter<"estoque"> | number | null
    estoque?: IntFilter<"estoque"> | number
    data?: DateTimeFilter<"estoque"> | Date | string
    notas?: StringNullableFilter<"estoque"> | string | null
  }, "id_do_tecido">

  export type estoqueOrderByWithAggregationInput = {
    id_do_tecido?: SortOrder
    nome_do_tecido?: SortOrder
    valor?: SortOrder
    fornecedor?: SortOrder
    composicao?: SortOrderInput | SortOrder
    largura?: SortOrderInput | SortOrder
    peso?: SortOrderInput | SortOrder
    estoque?: SortOrder
    data?: SortOrder
    notas?: SortOrderInput | SortOrder
    _count?: estoqueCountOrderByAggregateInput
    _avg?: estoqueAvgOrderByAggregateInput
    _max?: estoqueMaxOrderByAggregateInput
    _min?: estoqueMinOrderByAggregateInput
    _sum?: estoqueSumOrderByAggregateInput
  }

  export type estoqueScalarWhereWithAggregatesInput = {
    AND?: estoqueScalarWhereWithAggregatesInput | estoqueScalarWhereWithAggregatesInput[]
    OR?: estoqueScalarWhereWithAggregatesInput[]
    NOT?: estoqueScalarWhereWithAggregatesInput | estoqueScalarWhereWithAggregatesInput[]
    id_do_tecido?: IntWithAggregatesFilter<"estoque"> | number
    nome_do_tecido?: StringWithAggregatesFilter<"estoque"> | string
    valor?: FloatWithAggregatesFilter<"estoque"> | number
    fornecedor?: StringWithAggregatesFilter<"estoque"> | string
    composicao?: StringNullableWithAggregatesFilter<"estoque"> | string | null
    largura?: FloatNullableWithAggregatesFilter<"estoque"> | number | null
    peso?: FloatNullableWithAggregatesFilter<"estoque"> | number | null
    estoque?: IntWithAggregatesFilter<"estoque"> | number
    data?: DateTimeWithAggregatesFilter<"estoque"> | Date | string
    notas?: StringNullableWithAggregatesFilter<"estoque"> | string | null
  }

  export type Estoque_AgulhasWhereInput = {
    AND?: Estoque_AgulhasWhereInput | Estoque_AgulhasWhereInput[]
    OR?: Estoque_AgulhasWhereInput[]
    NOT?: Estoque_AgulhasWhereInput | Estoque_AgulhasWhereInput[]
    id_da_agulha?: IntFilter<"Estoque_Agulhas"> | number
    valor?: FloatFilter<"Estoque_Agulhas"> | number
    fornecedor?: StringNullableFilter<"Estoque_Agulhas"> | string | null
    numeracao?: StringNullableFilter<"Estoque_Agulhas"> | string | null
    estoque?: IntFilter<"Estoque_Agulhas"> | number
    data?: DateTimeFilter<"Estoque_Agulhas"> | Date | string
    notas?: StringNullableFilter<"Estoque_Agulhas"> | string | null
  }

  export type Estoque_AgulhasOrderByWithRelationInput = {
    id_da_agulha?: SortOrder
    valor?: SortOrder
    fornecedor?: SortOrderInput | SortOrder
    numeracao?: SortOrderInput | SortOrder
    estoque?: SortOrder
    data?: SortOrder
    notas?: SortOrderInput | SortOrder
  }

  export type Estoque_AgulhasWhereUniqueInput = Prisma.AtLeast<{
    id_da_agulha?: number
    AND?: Estoque_AgulhasWhereInput | Estoque_AgulhasWhereInput[]
    OR?: Estoque_AgulhasWhereInput[]
    NOT?: Estoque_AgulhasWhereInput | Estoque_AgulhasWhereInput[]
    valor?: FloatFilter<"Estoque_Agulhas"> | number
    fornecedor?: StringNullableFilter<"Estoque_Agulhas"> | string | null
    numeracao?: StringNullableFilter<"Estoque_Agulhas"> | string | null
    estoque?: IntFilter<"Estoque_Agulhas"> | number
    data?: DateTimeFilter<"Estoque_Agulhas"> | Date | string
    notas?: StringNullableFilter<"Estoque_Agulhas"> | string | null
  }, "id_da_agulha">

  export type Estoque_AgulhasOrderByWithAggregationInput = {
    id_da_agulha?: SortOrder
    valor?: SortOrder
    fornecedor?: SortOrderInput | SortOrder
    numeracao?: SortOrderInput | SortOrder
    estoque?: SortOrder
    data?: SortOrder
    notas?: SortOrderInput | SortOrder
    _count?: Estoque_AgulhasCountOrderByAggregateInput
    _avg?: Estoque_AgulhasAvgOrderByAggregateInput
    _max?: Estoque_AgulhasMaxOrderByAggregateInput
    _min?: Estoque_AgulhasMinOrderByAggregateInput
    _sum?: Estoque_AgulhasSumOrderByAggregateInput
  }

  export type Estoque_AgulhasScalarWhereWithAggregatesInput = {
    AND?: Estoque_AgulhasScalarWhereWithAggregatesInput | Estoque_AgulhasScalarWhereWithAggregatesInput[]
    OR?: Estoque_AgulhasScalarWhereWithAggregatesInput[]
    NOT?: Estoque_AgulhasScalarWhereWithAggregatesInput | Estoque_AgulhasScalarWhereWithAggregatesInput[]
    id_da_agulha?: IntWithAggregatesFilter<"Estoque_Agulhas"> | number
    valor?: FloatWithAggregatesFilter<"Estoque_Agulhas"> | number
    fornecedor?: StringNullableWithAggregatesFilter<"Estoque_Agulhas"> | string | null
    numeracao?: StringNullableWithAggregatesFilter<"Estoque_Agulhas"> | string | null
    estoque?: IntWithAggregatesFilter<"Estoque_Agulhas"> | number
    data?: DateTimeWithAggregatesFilter<"Estoque_Agulhas"> | Date | string
    notas?: StringNullableWithAggregatesFilter<"Estoque_Agulhas"> | string | null
  }

  export type FuncionariosWhereInput = {
    AND?: FuncionariosWhereInput | FuncionariosWhereInput[]
    OR?: FuncionariosWhereInput[]
    NOT?: FuncionariosWhereInput | FuncionariosWhereInput[]
    id?: IntFilter<"Funcionarios"> | number
    nome_do_funcionario?: StringFilter<"Funcionarios"> | string
    idade?: StringFilter<"Funcionarios"> | string
    funcoes?: StringFilter<"Funcionarios"> | string
    data?: DateTimeFilter<"Funcionarios"> | Date | string
    notas?: StringNullableFilter<"Funcionarios"> | string | null
  }

  export type FuncionariosOrderByWithRelationInput = {
    id?: SortOrder
    nome_do_funcionario?: SortOrder
    idade?: SortOrder
    funcoes?: SortOrder
    data?: SortOrder
    notas?: SortOrderInput | SortOrder
  }

  export type FuncionariosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FuncionariosWhereInput | FuncionariosWhereInput[]
    OR?: FuncionariosWhereInput[]
    NOT?: FuncionariosWhereInput | FuncionariosWhereInput[]
    nome_do_funcionario?: StringFilter<"Funcionarios"> | string
    idade?: StringFilter<"Funcionarios"> | string
    funcoes?: StringFilter<"Funcionarios"> | string
    data?: DateTimeFilter<"Funcionarios"> | Date | string
    notas?: StringNullableFilter<"Funcionarios"> | string | null
  }, "id">

  export type FuncionariosOrderByWithAggregationInput = {
    id?: SortOrder
    nome_do_funcionario?: SortOrder
    idade?: SortOrder
    funcoes?: SortOrder
    data?: SortOrder
    notas?: SortOrderInput | SortOrder
    _count?: FuncionariosCountOrderByAggregateInput
    _avg?: FuncionariosAvgOrderByAggregateInput
    _max?: FuncionariosMaxOrderByAggregateInput
    _min?: FuncionariosMinOrderByAggregateInput
    _sum?: FuncionariosSumOrderByAggregateInput
  }

  export type FuncionariosScalarWhereWithAggregatesInput = {
    AND?: FuncionariosScalarWhereWithAggregatesInput | FuncionariosScalarWhereWithAggregatesInput[]
    OR?: FuncionariosScalarWhereWithAggregatesInput[]
    NOT?: FuncionariosScalarWhereWithAggregatesInput | FuncionariosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Funcionarios"> | number
    nome_do_funcionario?: StringWithAggregatesFilter<"Funcionarios"> | string
    idade?: StringWithAggregatesFilter<"Funcionarios"> | string
    funcoes?: StringWithAggregatesFilter<"Funcionarios"> | string
    data?: DateTimeWithAggregatesFilter<"Funcionarios"> | Date | string
    notas?: StringNullableWithAggregatesFilter<"Funcionarios"> | string | null
  }

  export type estoqueCreateInput = {
    nome_do_tecido: string
    valor: number
    fornecedor: string
    composicao?: string | null
    largura?: number | null
    peso?: number | null
    estoque: number
    data: Date | string
    notas?: string | null
  }

  export type estoqueUncheckedCreateInput = {
    id_do_tecido?: number
    nome_do_tecido: string
    valor: number
    fornecedor: string
    composicao?: string | null
    largura?: number | null
    peso?: number | null
    estoque: number
    data: Date | string
    notas?: string | null
  }

  export type estoqueUpdateInput = {
    nome_do_tecido?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    fornecedor?: StringFieldUpdateOperationsInput | string
    composicao?: NullableStringFieldUpdateOperationsInput | string | null
    largura?: NullableFloatFieldUpdateOperationsInput | number | null
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    estoque?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type estoqueUncheckedUpdateInput = {
    id_do_tecido?: IntFieldUpdateOperationsInput | number
    nome_do_tecido?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    fornecedor?: StringFieldUpdateOperationsInput | string
    composicao?: NullableStringFieldUpdateOperationsInput | string | null
    largura?: NullableFloatFieldUpdateOperationsInput | number | null
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    estoque?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type estoqueCreateManyInput = {
    id_do_tecido?: number
    nome_do_tecido: string
    valor: number
    fornecedor: string
    composicao?: string | null
    largura?: number | null
    peso?: number | null
    estoque: number
    data: Date | string
    notas?: string | null
  }

  export type estoqueUpdateManyMutationInput = {
    nome_do_tecido?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    fornecedor?: StringFieldUpdateOperationsInput | string
    composicao?: NullableStringFieldUpdateOperationsInput | string | null
    largura?: NullableFloatFieldUpdateOperationsInput | number | null
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    estoque?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type estoqueUncheckedUpdateManyInput = {
    id_do_tecido?: IntFieldUpdateOperationsInput | number
    nome_do_tecido?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    fornecedor?: StringFieldUpdateOperationsInput | string
    composicao?: NullableStringFieldUpdateOperationsInput | string | null
    largura?: NullableFloatFieldUpdateOperationsInput | number | null
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    estoque?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Estoque_AgulhasCreateInput = {
    valor: number
    fornecedor?: string | null
    numeracao?: string | null
    estoque: number
    data: Date | string
    notas?: string | null
  }

  export type Estoque_AgulhasUncheckedCreateInput = {
    id_da_agulha?: number
    valor: number
    fornecedor?: string | null
    numeracao?: string | null
    estoque: number
    data: Date | string
    notas?: string | null
  }

  export type Estoque_AgulhasUpdateInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    fornecedor?: NullableStringFieldUpdateOperationsInput | string | null
    numeracao?: NullableStringFieldUpdateOperationsInput | string | null
    estoque?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Estoque_AgulhasUncheckedUpdateInput = {
    id_da_agulha?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    fornecedor?: NullableStringFieldUpdateOperationsInput | string | null
    numeracao?: NullableStringFieldUpdateOperationsInput | string | null
    estoque?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Estoque_AgulhasCreateManyInput = {
    id_da_agulha?: number
    valor: number
    fornecedor?: string | null
    numeracao?: string | null
    estoque: number
    data: Date | string
    notas?: string | null
  }

  export type Estoque_AgulhasUpdateManyMutationInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    fornecedor?: NullableStringFieldUpdateOperationsInput | string | null
    numeracao?: NullableStringFieldUpdateOperationsInput | string | null
    estoque?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Estoque_AgulhasUncheckedUpdateManyInput = {
    id_da_agulha?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    fornecedor?: NullableStringFieldUpdateOperationsInput | string | null
    numeracao?: NullableStringFieldUpdateOperationsInput | string | null
    estoque?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FuncionariosCreateInput = {
    nome_do_funcionario: string
    idade: string
    funcoes: string
    data: Date | string
    notas?: string | null
  }

  export type FuncionariosUncheckedCreateInput = {
    id?: number
    nome_do_funcionario: string
    idade: string
    funcoes: string
    data: Date | string
    notas?: string | null
  }

  export type FuncionariosUpdateInput = {
    nome_do_funcionario?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    funcoes?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FuncionariosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_do_funcionario?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    funcoes?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FuncionariosCreateManyInput = {
    id?: number
    nome_do_funcionario: string
    idade: string
    funcoes: string
    data: Date | string
    notas?: string | null
  }

  export type FuncionariosUpdateManyMutationInput = {
    nome_do_funcionario?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    funcoes?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FuncionariosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_do_funcionario?: StringFieldUpdateOperationsInput | string
    idade?: StringFieldUpdateOperationsInput | string
    funcoes?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type estoqueCountOrderByAggregateInput = {
    id_do_tecido?: SortOrder
    nome_do_tecido?: SortOrder
    valor?: SortOrder
    fornecedor?: SortOrder
    composicao?: SortOrder
    largura?: SortOrder
    peso?: SortOrder
    estoque?: SortOrder
    data?: SortOrder
    notas?: SortOrder
  }

  export type estoqueAvgOrderByAggregateInput = {
    id_do_tecido?: SortOrder
    valor?: SortOrder
    largura?: SortOrder
    peso?: SortOrder
    estoque?: SortOrder
  }

  export type estoqueMaxOrderByAggregateInput = {
    id_do_tecido?: SortOrder
    nome_do_tecido?: SortOrder
    valor?: SortOrder
    fornecedor?: SortOrder
    composicao?: SortOrder
    largura?: SortOrder
    peso?: SortOrder
    estoque?: SortOrder
    data?: SortOrder
    notas?: SortOrder
  }

  export type estoqueMinOrderByAggregateInput = {
    id_do_tecido?: SortOrder
    nome_do_tecido?: SortOrder
    valor?: SortOrder
    fornecedor?: SortOrder
    composicao?: SortOrder
    largura?: SortOrder
    peso?: SortOrder
    estoque?: SortOrder
    data?: SortOrder
    notas?: SortOrder
  }

  export type estoqueSumOrderByAggregateInput = {
    id_do_tecido?: SortOrder
    valor?: SortOrder
    largura?: SortOrder
    peso?: SortOrder
    estoque?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type Estoque_AgulhasCountOrderByAggregateInput = {
    id_da_agulha?: SortOrder
    valor?: SortOrder
    fornecedor?: SortOrder
    numeracao?: SortOrder
    estoque?: SortOrder
    data?: SortOrder
    notas?: SortOrder
  }

  export type Estoque_AgulhasAvgOrderByAggregateInput = {
    id_da_agulha?: SortOrder
    valor?: SortOrder
    estoque?: SortOrder
  }

  export type Estoque_AgulhasMaxOrderByAggregateInput = {
    id_da_agulha?: SortOrder
    valor?: SortOrder
    fornecedor?: SortOrder
    numeracao?: SortOrder
    estoque?: SortOrder
    data?: SortOrder
    notas?: SortOrder
  }

  export type Estoque_AgulhasMinOrderByAggregateInput = {
    id_da_agulha?: SortOrder
    valor?: SortOrder
    fornecedor?: SortOrder
    numeracao?: SortOrder
    estoque?: SortOrder
    data?: SortOrder
    notas?: SortOrder
  }

  export type Estoque_AgulhasSumOrderByAggregateInput = {
    id_da_agulha?: SortOrder
    valor?: SortOrder
    estoque?: SortOrder
  }

  export type FuncionariosCountOrderByAggregateInput = {
    id?: SortOrder
    nome_do_funcionario?: SortOrder
    idade?: SortOrder
    funcoes?: SortOrder
    data?: SortOrder
    notas?: SortOrder
  }

  export type FuncionariosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FuncionariosMaxOrderByAggregateInput = {
    id?: SortOrder
    nome_do_funcionario?: SortOrder
    idade?: SortOrder
    funcoes?: SortOrder
    data?: SortOrder
    notas?: SortOrder
  }

  export type FuncionariosMinOrderByAggregateInput = {
    id?: SortOrder
    nome_do_funcionario?: SortOrder
    idade?: SortOrder
    funcoes?: SortOrder
    data?: SortOrder
    notas?: SortOrder
  }

  export type FuncionariosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use estoqueDefaultArgs instead
     */
    export type estoqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = estoqueDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Estoque_AgulhasDefaultArgs instead
     */
    export type Estoque_AgulhasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = Estoque_AgulhasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FuncionariosDefaultArgs instead
     */
    export type FuncionariosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FuncionariosDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}