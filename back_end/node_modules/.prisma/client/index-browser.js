
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 5.1.0
 * Query Engine version: a9b7003df90aa623086e4d6f4e43c72468e6339b
 */
Prisma.prismaVersion = {
  client: "5.1.0",
  engine: "a9b7003df90aa623086e4d6f4e43c72468e6339b"
}


const runtimeDescription = (() => {
  // https://edge-runtime.vercel.app/features/available-apis#addressing-the-runtime
  if ("EdgeRuntime" in globalThis && typeof globalThis.EdgeRuntime === "string") {
    return "under the Vercel Edge Runtime";
  }
  // Deno
  if ("Deno" in globalThis && typeof globalThis.Deno === "object") {
    return "under the Deno runtime";
  }
  // Default to assuming browser
  return "in the browser";
})();


Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.EstabelecimentoScalarFieldEnum = {
  cnpj: 'cnpj',
  nome: 'nome',
  email: 'email',
  senha: 'senha'
};

exports.Prisma.Estoque_TecidosScalarFieldEnum = {
  id_do_tecido: 'id_do_tecido',
  id_estabelecimento: 'id_estabelecimento',
  nome_do_tecido: 'nome_do_tecido',
  valor: 'valor',
  fornecedor: 'fornecedor',
  composicao: 'composicao',
  largura: 'largura',
  peso: 'peso',
  estoque: 'estoque',
  data_: 'data_',
  tamanho: 'tamanho',
  notas: 'notas'
};

exports.Prisma.Estoque_AgulhasScalarFieldEnum = {
  id_da_agulha: 'id_da_agulha',
  id_estabelecimento: 'id_estabelecimento',
  valor: 'valor',
  fornecedor: 'fornecedor',
  numeracao: 'numeracao',
  estoque: 'estoque',
  data: 'data',
  notas: 'notas'
};

exports.Prisma.FuncionariosScalarFieldEnum = {
  id: 'id',
  nome_do_funcionario: 'nome_do_funcionario',
  idade: 'idade',
  funcoes: 'funcoes',
  aniversario: 'aniversario',
  identidade: 'identidade',
  cpf: 'cpf',
  pis: 'pis',
  pix: 'pix',
  data: 'data',
  Horas_faltas: 'Horas_faltas',
  Horas_extras: 'Horas_extras',
  justificativa: 'justificativa',
  notas: 'notas'
};

exports.Prisma.TarefasScalarFieldEnum = {
  id: 'id',
  id_estabelecimento: 'id_estabelecimento',
  tarefa: 'tarefa',
  status: 'status',
  data_abertura: 'data_abertura',
  data_conclusao: 'data_conclusao',
  notas: 'notas'
};

exports.Prisma.PedidosScalarFieldEnum = {
  id: 'id',
  Tipo_do_pedido: 'Tipo_do_pedido',
  status: 'status',
  data_do_pedido: 'data_do_pedido',
  data_de_entrega: 'data_de_entrega'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Estabelecimento: 'Estabelecimento',
  Estoque_Tecidos: 'Estoque_Tecidos',
  Estoque_Agulhas: 'Estoque_Agulhas',
  Funcionarios: 'Funcionarios',
  Tarefas: 'Tarefas',
  Pedidos: 'Pedidos'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
