generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
generator erd {
  provider = "prisma-erd-generator"
  output   = "/home/gabriel/ERD.svg"
}

model Usuarios {
  nome                String
  email               String @id
  senha               String
  foto                String   @db.VarChar(2048)
  idade               Int
  funcoes             String?
  identidade          String?
  cpf                 String?
  pis                 String?
  pix                 String?     
  notas               String?

  estabelecimentoCnpj String
  Estabelecimento     Estabelecimento @relation(fields: [estabelecimentoCnpj], references: [cnpj])

  producao_funcionario Producao[]
}

model Estabelecimento {
  cnpj                String @id
  usuarios            Usuarios[] // <- agora sim, vários funcionários ligados a 1 cnpj

  estoque_tecidos     Estoque_Tecidos[]
  estoque_agulhas     Estoque_Agulhas[]
  tarefas             Tarefas[]
  PecasOP             PecasOP[]
  Producao            Producao[]
}


model PecasOP {
  id_da_op           Int       @id @default(autoincrement())
  Estabelecimento    Estabelecimento  @relation(fields: [id_Estabelecimento], references: [cnpj])
  id_Estabelecimento String
  status             String?
  descricao          String?
  quantidade_pecas   Int?
  pedido_por         String?
  valor_peca         Float?
  data_do_pedido     String?
  data_de_entrega    String?
  notas              String?
  producao_peca      Producao[]

  etapas             PecasEtapas[]
}

model Etapa {
  id_da_funcao  Int     @id @default(autoincrement())
  descricao     String  @unique // Nome da etapa deve ser único
  pecas         PecasEtapas[]  // Relacionamento M:N através da tabela intermediária
  producao_etapa Producao[] // Relacionamento com a tabela de produção
}

// Tabela intermediária para conectar PecasOP e Etapa (Relacionamento M:N)
model PecasEtapas {
  id_da_op      Int
  id_da_funcao  Int

  peca_op       PecasOP @relation(fields: [id_da_op], references: [id_da_op], onDelete: Cascade)
  etapa         Etapa   @relation(fields: [id_da_funcao], references: [id_da_funcao], onDelete: Cascade)

  @@id([id_da_op, id_da_funcao]) // Chave composta para garantir unicidade
}

model Producao {
  id_da_producao         Int       @id @default(autoincrement())
  quantidade_pecas       Int?
  id_Estabelecimento     String
  id_da_op               Int
  id_funcionario         String
  id_da_funcao           Int        // <- ADICIONADO: etapa da produção (ex: corte, costura...)

  data_inicio            String?
  hora_registro          String?

  Estabelecimento        Estabelecimento  @relation(fields: [id_Estabelecimento], references: [cnpj])
  producao_peca          PecasOP          @relation(fields: [id_da_op], references: [id_da_op])
  producao_funcionario   Usuarios         @relation(fields: [id_funcionario], references: [email])
  producao_etapa         Etapa            @relation(fields: [id_da_funcao], references: [id_da_funcao]) // <- NOVO RELACIONAMENTO

  @@index([id_da_op])
  @@index([id_da_funcao])
}


model Estoque_Tecidos {
  id_do_tecido       Int     @id @default(autoincrement())
  Estabelecimento    Estabelecimento  @relation(fields: [id_Estabelecimento], references: [cnpj])
  id_Estabelecimento String
  nome_do_tecido     String
  valor              Float
  fornecedor         String
  composicao         String?
  largura            Float?
  peso               Float?
  estoque            Int
  data_              DateTime
  tamanho            Float?
  notas              String?
}

model Estoque_Agulhas {
  id_da_agulha       Int     @id @default(autoincrement())
  Estabelecimento    Estabelecimento  @relation(fields: [id_Estabelecimento], references: [cnpj])
  id_Estabelecimento String
  valor              Float
  fornecedor         String?
  numeracao          String?
  estoque            Int
  data               DateTime
  notas              String?
}
model Tarefas {
  id                  Int     @id @default(autoincrement())
  Estabelecimento     Estabelecimento  @relation(fields: [id_Estabelecimento], references: [cnpj])
  id_Estabelecimento  String
  tarefa              String
  status              String
  data_abertura       DateTime
  data_conclusao      DateTime?
  notas               String?
}
